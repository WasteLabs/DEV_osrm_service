name: OSRM service testing...

on:
  pull_request:
    branches: [ main ]

jobs:

  terraform-deploy:

    name: "Terraform test deployment"
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      # Marketplace: https://github.com/marketplace/actions/checkout
      - name: "Setup - Checkout"
        uses: actions/checkout@v2.1.0

      # Provides AWS credentials to Terraform
      # By default, Terraform checks the home directory for a .aws folder with a credential file
      # Documentation: https://docs.aws.amazon.com/ses/latest/DeveloperGuide/create-shared-credentials-file.html
      - name: "Setup - Build AWS Credentials"
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
      # Downloads a specific version of Terraform CLI and adds it to PATH
      # Marketplace: https://github.com/marketplace/actions/hashicorp-setup-terraform
      - name: "Setup - Terraform CLI"
        uses: hashicorp/setup-terraform@v1.0.1

      # == VPC deployment ==
      - name: "Terraform VPC | initialization"
        run: cd infrastructure/vpc && terraform init -input=false

      - name: "Terraform VPC | change workspace"
        run: terraform workspace select test

      - name: "Terraform VPC | deployment"
        run: terraform apply -input=false -auto-approve

      # == OSRM deployment ==
      - name: "Terraform OSRM | initialization"
        run: cd ../osrm && terraform init -input=false

      - name: "Terraform OSRM | change workspace"
        run: terraform workspace select test

      - name: "Terraform OSRM | deployment"
        run: terraform apply -input=false -auto-approve
      
      - name: "Terraform OSRM | deployment"
        run: terraform destroy -input=false -auto-approve
      
      # == VPC destroy ==
      - name: "Terraform VPC | destroy"
        run: cd ../vpc && terraform destroy -input=false -auto-approve

  # docker-build:

  #   runs-on: ubuntu-latest
  #   steps:

  #   - uses: actions/checkout@v2
  
  #   - name: Set up Python 3.9
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.9

  #   - name: Building OSRM docker image
  #     run: bash -c "source docker/build.sh"

  #   - name: Starting docker container
  #     run: bash -c "docker-compose -f docker/docker-compose-test.yaml up -d"

  #   - name: Sleeping until pbf will be downloaded and parsed
  #     run: bash -c "sleep 60"

  #   - name: Checking if container is running
  #     run: bash -c "source docker/check_if_container_is_running.sh"

  #   - name: Starting docker container
  #     run: bash -c "docker-compose -f docker/docker-compose-test.yaml down"
