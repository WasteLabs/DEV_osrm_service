name: OSRM service testing...

on:
  pull_request:
    branches: [ main ]

jobs:

  terraform-deploy:

    name: "Terraform test deployment"
    runs-on: ubuntu-latest

    steps:

      - name: "Setup - Checkout"
        uses: actions/checkout@v2.1.0

      - name: "Setup AWS Credentials"
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.8
        
      - name: Terraform | init VPC & select test workspace
        id: init_vpc
        run: cd infrastructure/vpc && terraform init && terraform workspace select test
        
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve      
      
  # docker-build:

  #   runs-on: ubuntu-latest
  #   steps:

  #   - uses: actions/checkout@v2
  
  #   - name: Set up Python 3.9
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.9

  #   - name: Building OSRM docker image
  #     run: bash -c "source docker/build.sh"

  #   - name: Starting docker container
  #     run: bash -c "docker-compose -f docker/docker-compose-test.yaml up -d"

  #   - name: Sleeping until pbf will be downloaded and parsed
  #     run: bash -c "sleep 60"

  #   - name: Checking if container is running
  #     run: bash -c "source docker/check_if_container_is_running.sh"

  #   - name: Starting docker container
  #     run: bash -c "docker-compose -f docker/docker-compose-test.yaml down"
